params {
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time   = { check_max( 1.h  * task.attempt, 'time'   ) }

    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    withName: 'fastp' {
        cpus = { check_max( 4   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 10.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h  * task.attempt, 'time'    ) }
    }

    withName: 'STAR' {
        cpus = { check_max( 16     * task.attempt, 'cpus'    ) }
        memory =  { check_max( 80.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time'    ) }
    }

    withName: 'samtools' {
        cpus = { check_max( 8   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 36.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h  * task.attempt, 'time'    ) }
    }

    withName: 'stringtie' {
        cpus = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h  * task.attempt, 'time'    ) }
    }

    withName: 'mergeGTF' {
        cpus = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory =  { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h  * task.attempt, 'time'    ) }
    }

    withName: 'filterAnnotate' {
        cpus = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time'    ) }
    }

    withLabel: 'salmon' {
        cpus = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory =  { check_max( 48.GB * task.attempt, 'memory' ) }
        time =  { check_max( 24.h * task.attempt, 'memory' ) }
    }

}

//TODO finish extracting requirements and publishDir (?)